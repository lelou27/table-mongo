<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport"
        content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Mini-jeu</title>
  <style>
    canvas {
      width: 100%;
      height: 70vh;
      padding-left: 10rem;
      text-align: center;
      padding-top: 2rem;
    }

    .text-center {
      text-align: center;
      margin-bottom: 1rem;
    }

    .flex-game {
      display: flex;
    }

    .game {
      display: flex;
    }
  </style>
</head>
<body>
<div class="text-center">
  <div>Jouons à un petit jeu :P</div>
  <button type="button" onclick="init()">Start</button>
  <button type="button" onclick="">
    <a class="nav-link" href="/upload-img/test">Home</a>
  </button>
</div>
<div class="flex-game">
  <div id="game-question" style="width: 50%; text-align: right; padding-right: 5rem"></div>
  <div id="result" style="width: 50%"></div>
  <div style="width: 50%">
    <span id="score">Votre score : 0</span>
    <br>
    <span id="streak">Votre série : 0</span>
  </div>
</div>
<div class="game">
  <div id="webcam-container"></div>
  <div id="label-container"></div>
</div>
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
<script type="text/javascript">
  // More API functions here:
  // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image

  // the link to your model provided by Teachable Machine export panel
  const URL = "/my_model/";
  const columnArray = [];
  let itemSelected = '';
  let trouve = false;
  let tourBoucle = 0;
  let score = 0;
  let streak = 0

  let model, webcam, labelContainer, maxPredictions;

  // Load the image model and setup the webcam
  async function init() {
    const modelURL = URL + "model.json";
    const metadataURL = URL + "metadata.json";

    // load the model and metadata
    // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
    // or files from your local hard drive
    // Note: the pose library adds "tmImage" object to your window (window.tmImage)
    model = await tmImage.load(modelURL, metadataURL);
    maxPredictions = model.getTotalClasses();

    // Convenience function to setup a webcam
    const flip = true; // whether to flip the webcam
    webcam = new tmImage.Webcam(500, 500, flip); // width, height, flip
    await webcam.setup(); // request access to the webcam
    await webcam.play();
    window.requestAnimationFrame(loop);

    // append elements to the DOM
    document.getElementById("webcam-container").appendChild(webcam.canvas);
    labelContainer = document.getElementById("label-container");
    for (let i = 0; i < maxPredictions; i++) { // and class labels
      labelContainer.appendChild(document.createElement("div"));
    }
  }

  async function loop() {
    if (itemSelected === '' && columnArray.length > 0) {
      let item = columnArray[Math.floor(Math.random() * columnArray.length)];
      itemSelected = item;
      trouve = false;
      document.getElementById('game-question').innerText = `Veuillez montrer un(e) ${itemSelected}`;
      document.getElementById('game-question').style.fontSize = '2rem';
      document.getElementById('game-question').style.color = '#ee4243';
    }
    webcam.update(); // update the webcam frame
    await predict();
    window.requestAnimationFrame(loop);
    tourBoucle++;
  }

  // run the webcam image through the image model
  async function predict() {
    // predict can take in an image, video or canvas html element
    const prediction = await model.predict(webcam.canvas);
    for (let i = 0; i < maxPredictions; i++) {
      const pourcentage = (prediction[i].probability.toFixed(2) * 100);
      const classPrediction =
        prediction[i].className + ": " + pourcentage + '%';

      if (!columnArray.includes(prediction[i].className)) {
        columnArray.push(prediction[i].className);
      }

      if (itemSelected !== '' && itemSelected === prediction[i].className && !trouve && pourcentage > 85) {
        trouve = true;
        tourBoucle = 0
        document.getElementById('result').innerText = 'BRRRRAAAAAVOOOOOOOOOOO';

        itemSelected = '';
        streak++;
        score += 10;

        if(streak > 10) {
          score += 10;
        }

        if (streak > 20) {
          score += 20;
        }

        document.getElementById('score').innerText = `Votre score : ${score}`;
        document.getElementById('streak').innerText = `Votre série : ${streak}`;
      }

      if (tourBoucle > 40) {
        document.getElementById('result').innerText = '';
      }

      if (tourBoucle > 200) {
        document.getElementById('result').innerText = 'Nope';
        streak = 0;
        document.getElementById('streak').innerText = `Votre série : ${streak}`;
      }


      labelContainer.style.display = "flex";
      labelContainer.style.flexDirection = "column";
      labelContainer.style.width = '30%';
      labelContainer.style.textAlign = 'right';
      labelContainer.style.paddingTop = '10rem';

      labelContainer.childNodes[i].innerHTML = `
      <label style="width: 25%; text-align: right">${prediction[i].className + ": "}
        <meter id="fuel"
          min="0" max="100"
          low="33" high="66" optimum="80"
          value="${pourcentage}"
          style="margin-left: 2rem"
        >
        </meter>
      <span>${parseInt(pourcentage)} %</span>
      </label>

      `;
    }
  }
</script>
<script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@0.8/dist/teachablemachine-image.min.js"></script>

</body>
</html>
